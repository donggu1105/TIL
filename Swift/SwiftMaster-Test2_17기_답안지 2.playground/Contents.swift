import UIKit

/*:
# 앨런 - Swift 마스터 스쿨 17기
*/
/*:
## 두번째 테스트 (3주차) 답안지
---
*/
/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 그동안 배운 내용의 복습 및 약간의 응용이 들어가 있을 뿐입니다. 이 문제를 잘 풀 수 있다고
 좋은 개발자가 될 수 있는 것도 아니고, 실망하거나 좌절할 필요도 없습니다.
 우린 이제 시작일 뿐입니다. 😄
 가장 중요한 것은 포기하지 않고, 꾸준함을 유지하는 것일뿐!
 안풀리면, 다음 문제로 넘어가면되고, 이번에 못풀면 잘 공부해서, 다음 번에 똑같은 문제를 잘 풀면됩니다.
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/

// 서술형의 경우, 주석처리를 하고 작성하면 됩니다.
// (시간이 약간 모자랄 수도 있을 것 같긴한데, 되는 대로 풀어서, 슬랙 DM으로 전달해 주세요!)



/**==================================================================
 [1번 문제]
  - 아래 정수형의 num 변수와, (문자열 배열의) array 변수가 있어요.
    어떻게 해야, 100가지의 랜덤숫자를 이용해서 배열에서 넘치지 않고, 범위의 에러 없이
    배열 내부의 값을 꺼낼 수 있을까요?
    (아래처럼 범위가 넘치지 않고 반복 되도록 배열의 요소에 접근할 수 있는 방법을 제시)
    "Hello" -> "Jobs" -> "Swift" -> "Cook" -> "Hello"
    (힌트: 나머지 값은 때로는 아주 유용합니다.)
 ===================================================================**/


var num = Int.random(in: 1...100)
var array = ["Hello", "Jobs", "Swift", "Cook"]


// 아래 주석을 제거하시면 됩니다.
var result = array[num % array.count]
print(result)





/**==================================================================
 [2번 문제]
  - 삼항 연산자를 사용해서 "성공"과 "실패"를 출력하는 코드를 만들어 보세요.
    (삼항 연산자는 "?"와 ":"를 사용하는 문법)
    number의 변수의 랜덤 숫자가 70점 이상이면 "성공"을 출력
    number의 변수의 랜덤 숫자가 70점 미만이면 "실패"를 출력
 ===================================================================**/


var number = Int.random(in: 50...100)


// 아래 주석을 제거하시면 됩니다.
var isSuccess = number >= 70 ? "성공" : "실패"
print(isSuccess)





/**==================================================================
 [3번 문제]
  -  아래의 반복문을 사용해서, 1부터 20사이의 숫자 중에서 2의 배수를 출력하는 코드를 완성하세요.
 ===================================================================**/


for num in 1...20 {
    if num % 2 == 0 {
        print("2의 배수: \(num)")
    }
}







/**==================================================================
 [4번 문제]
  - 아래의 배열에서, 가장 큰 숫자를 찾아내는 함수의 구현을 완성시켜 보세요. 배열 전달시
    배열 내의 가장 큰 숫자를 찾아내서, 리턴을 하면 됩니다.
    (아래 배열의 경우, 가장 큰 숫자가 9이죠? 숫자 9를 리턴할 수 있도록 함수 내부를
     구현 하시면 됩니다.)
    (힌트: 함수 내부에 변수 하나를 만들고, 어떻게 하면 가장 큰 숫자를 지속적으로 이 변수에 담을 수 있을까요?)
    (잘못푸셔도 괜찮아요. 오늘 세션(시간 복잡도 관련 알고리즘 세션)에서 풀어드릴 예정입니다.)
 ===================================================================**/


var numArray = [4, 0, 1, 7, 9, 3]


// 대략적인 힌트
func findMaxNumber(array:[Int]) -> Int {
    var maxNum = array[0]   // (가장 큰 숫자를 담을 변수) 일단 배열의 첫번째 숫자를 저장
    
    for num in array {      // 배열에 있는 요소들을 한번씩 꺼내서
        if num > maxNum {   // 지금 현재 maxNum 숫자랑 비교해서 num가 더 크면
            maxNum = num    // num을 maxNum에 저장
        }                   // 결국 반복문으로 모든 요소들을 한번씩 거치니... 가장 큰 숫자가 저장될 것임
    }
    
    return maxNum           // 가장 큰 숫자 리턴
}




// 함수의 실행
findMaxNumber(array: numArray)






/**==================================================================
 [5번 문제]
  - 아래의 배열에서, 배열의 앞의 3개 요소를 교체할 수 있는 문법 2가지를 제시하세요.
    예시) 배열 내의 ["A, "B", "C"]를 ["x", "y", "z"]로 교체
    (힌트: 1.서브스크립트 / 2.정식문법)
 ===================================================================**/


var alphabetArray = ["A", "B", "C", "D", "E", "F", "G"]


// 아래 배열을 이용
["x", "y", "z"]

// 1. 서브스크립트
alphabetArray[0...2] = ["x", "y", "z"]


// 2. 정식 문법
alphabetArray.replaceSubrange(0...2, with: ["x", "y", "z"])






/**==================================================================
 [6번 문제]
  - 아래의 puppy 배열에서, 가장 뒤쪽의 문자열 "p"를 제거하는 코드를 작성하세요.
    (힌트: 1) 뒤에서부터 인덱스 확인 2) 인덱스를 이용 배열에서 제거(삭제) )
 ===================================================================**/



var puppy = ["p", "u", "p", "p", "y"]

// 여기에 코드 작성

if let index = puppy.lastIndex(of: "p") {
    puppy.remove(at: index)
}


// 배열 확인 및 출력
print(puppy)






/**==================================================================
 [7번 문제]
 - 아래의 딕셔너리에서, 키값 "A"에 해당하는 value값인 "Apple"을 꺼내서 출력하세요.
   (옵셔널 문자열값이 아닌 문자열 값으로 출력하세요.)
   (힌트: 옵셔널 바인딩)
 ===================================================================**/


var dic = ["A": "Apple", "B": "Banana", "C": "City"]


// 딕셔너리의 결과값이 옵셔널 타입이기 때문에.. 옵셔널 바인딩과 합쳐서 작성
if let result2 = dic["A"] {
    print(result2)
}


// 또는 아래와 같은 방법도 가능
// 결과값을 꺼내고, 옵셔널 바인딩은 따로
var result22 = dic["A"]

if let result = result22 {
    print(result)
}




/**==================================================================
 [8번 문제]
  - 소수를 판별하는 함수를 완성해 보세요.
    1) 소수인 경우, "소수입니다."를 출력
    2) 소수가 아닌 경우, "소수가 아닙니다."를 출력
    (소수는 1과 자기자신만으로 나누어 떨어지는 1보다 큰 양의 정수)
    (힌트: 숫자를 자기 자신으로 나누어보면 되겠죠?)
 ===================================================================**/

// 소수를 판별하는 함수를 완성하세요.
func primeNumber(num: Int) {

    for i in 2..<num {
        if num % i == 0 {
            print("소수가 아닙니다.")
            return
        }
    }
    print("소수입니다.")
}



primeNumber(num: 7)  // 소수입니다.
primeNumber(num: 4)  // 소수가 아닙니다.
primeNumber(num: 11) // 소수입니다.
primeNumber(num: 97) // 소수입니다.







/**==================================================================
 [9번 문제]
  -  다음의 제어전송문 4가지를 각각 쓰이는 경우와 어떻게 사용되는지 간단하게 설명하세요.
    (break / fallthrough / continue / return)
    (힌트1: break는 2가지 경우에 쓰입니다.)
    (힌트2: return은 리턴타입이 있는 함수/리턴타입이 없는 함수 구분해서, 설명해 주세요.)
 ===================================================================**/

// 1.break문
// 반복문(for/while)에서 break - (가장 가까운) 반복문을 완전히 종료
// switch문에서 break - case에서 어떤 문장의 실행도 없을 때 입력하는 약속


// 2.fallthrough문
// switch문에서 어떤 해당 case를 해당한 후, 다음 case의 해당 여부를
// 따지지 않고, 다음 case 내부의 문장을 실행


// 3.continue문
// 반복문에서 (가장 가까운) 반복의 이번 주기를 끝내고 다음 주기로 바로 넘어가서,
// 다음 주기를 실행


// 4.return문
// 1) return 타입이 없는 경우 - 해당 함수를 종료하고 벗어남
// 2) return 타입이 있는 경우 - return 문 뒤의 표현식을 평가한 후, 그 값을 반환하면서 함수를 종료하고 벗어남





/**==================================================================
 [10번 문제]
  - Optional을 언래핑(Unrapping) 하는 4가지 방법은? 간단하게 서술로 쓰시면 됩니다.
 ===================================================================**/

// 1번 방법
// 강제 언래핑 (!)


// 2번 방법
// if문으로 nil이 아님을 확인 한후, if문 안에서 강제 언래핑


// 3번 방법
// 옵셔널 바인딩(if let 바인딩)


// 4번 방법
// 옵셔널표현식 ?? 디폴트값의 제시






/**==================================================================
 [11번 문제]
 구글(google), 페이스북(facebook), 네이버(naver) 로그인을 위해, SiteLogin 이라는
 이름을 가진 Enum 타입이 아래에 있습니다. 그리고 열거형의 연관값으로 이메일과, 비밀번호가
 저장된 인스턴스가 login1이라는 변수에 저장되어 있습니다.
 
 스위치문(switch)을 사용해서 열거형을 분기처리하고, 연관값을 꺼내서 출력하는 코드를
 작성하세요.
 
 출력결과: "이메일 주소: google@gmail.com, 비밀번호: 0000"
 
  (힌트: 연관값을 어떻게 꺼낼 수 있을까요?)
 ===================================================================**/

// enum타입과 하나의 인스턴스 제시

enum SiteLogin {
    case google(email: String, password: String)
    case facebook(email: String, password: String)
    case naver(email: String, password: String)
}

var login1 = SiteLogin.google(email: "google@gmail.com", password: "0000")



// 아래 스위치문을 작성해서, 이메일과 비밀번호를 출력하는 코드를 완성하세요.

switch login1 {
case .google(email: let email, password: let password):
    print("이메일 주소: \(email), 비밀번호: \(password)")
case .facebook(email: let email, password: let password):
    print("이메일 주소: \(email), 비밀번호: \(password)")
case .naver(email: let email, password: let password):
    print("이메일 주소: \(email), 비밀번호: \(password)")
}





/**==================================================================
 [12번 문제]
  - 클래스에서 저장속성이 뭘까요? 아는대로 설명해 보세요!
 ===================================================================**/

// 저장속성
// 인스턴스 내에 실제 데이터값을 저장할 수 있는 데이터 저장 공간 / 인스턴스 내의 변수(상수)







/**==================================================================
 [13번 문제]
  - 클래스에서 계산 속성이 뭘까요? 아는대로 설명해 보세요!
 ===================================================================**/

// 계산속성
// 속성의 형태를 가진 실질적인 메서드 (실제 데이터 값은 없음)
// get블록(getter) / set블록(setter)가 존재
// 1) getter - 외부에서 인스턴스에 접근해서 값을 얻어가는 메서드 (필수/최소한)
// 2) setter - 외부에서 인스턴스에 접근해서 값을 셋팅하는 메서드 (선택)







/**==================================================================
 [14번 문제]
  - 클래스와 구조체의 차이에 대해서, 아는대로 서술해 보세요.
 ===================================================================**/

// 실제로 디테일하게는 여러가지 차이점이 있지만, 아래 가장 중요한 차이점 2가지는
// 반드시 외우고 있어야 함

// 1) 상속 가능 여부
//    (1) 클래스는 상속가능
//    (2) 구조체는 상속 불가능

// 2) 메모리 저장의 차이
//    (1) 클래스의 인스턴스는 Heap (참조 타입)
//    (2) 구조체의 인스턴스는 Stack (값 타입)








/**>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 수고 하셨습니다. 😄
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>**/
